package ${project.basePackage}.service;

import ${project.basePackage}.domain.${entity.name};
import ${project.basePackage}.dto.${entity.name}Dto;
import ${project.basePackage}.mapper.${entity.name}Mapper;
<#list entity.relations as relation>
// TODO possible duplication from different relations with same entity
import ${project.basePackage}.mapper.${relation.targetEntity.name}Mapper;
import ${project.basePackage}.dto.${relation.targetEntity.name}Dto;
import ${project.basePackage}.domain.${relation.targetEntity.name};
</#list>

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.transaction.Transactional;
import javax.ws.rs.ClientErrorException;
import javax.ws.rs.NotFoundException;
import javax.ws.rs.core.Response;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

@ApplicationScoped
@Transactional
public class ${entity.name}Service {

    @Inject
    ${entity.name}Mapper mapper;
    <#list entity.relations as relation>

    @Inject
    ${relation.targetEntity.name}Mapper ${relation.name}Mapper;
    </#list>

    public List<${entity.name}Dto> getAll() {
        return ${entity.name}.<${entity.name}>findAll()
                .stream()
                .map(mapper::toDto)
                .toList();
    }

    public Optional<${entity.name}Dto> get(Long id) {
        return ${entity.name}.<${entity.name}>findByIdOptional(id)
                .map(mapper::toDto);
    }

    public ${entity.name}Dto create(${entity.name}Dto dto) {
        final ${entity.name} entity = mapper.toEntity(dto);
        entity.persist();
        return mapper.toDto(entity);
    }

    public void update(Long id, ${entity.name}Dto dto) {
        final ${entity.name} entity = mapper.toEntity(dto);
        final ${entity.name} existing = ${entity.name}.<${entity.name}>findByIdOptional(id)
                .orElseThrow(NotFoundException::new);

        <#list entity.fields as field>
        existing.${field.name} = entity.${field.name};
        </#list>
    }

    public void modify(Long id, ${entity.name}Dto dto) {
        final ${entity.name} entity = mapper.toEntity(dto);
        final ${entity.name} existing = ${entity.name}.<${entity.name}>findByIdOptional(id)
                .orElseThrow(NotFoundException::new);

        <#list entity.fields as field>
        Optional.ofNullable(entity.${field.name}).ifPresent(it -> existing.${field.name} = it);
        </#list>
    }

    public void delete(Long id) {
        ${entity.name}.findByIdOptional(id)
                .orElseThrow(NotFoundException::new)
                .delete();
    }

    public long count() {
        return ${entity.name}.count();
    }
   
    <#list entity.relations?filter(r -> r.type == 'MANY_TO_ONE' || r.type == 'ONE_TO_ONE') as relation>

    public Optional<${relation.name?cap_first}Dto> get${relation.name?cap_first}(Long id) {
        return ${entity.name}.<${entity.name}>findByIdOptional(id)
                .map(u -> u.role)
                .map(roleMapper::toDto);
    }

    public void set${relation.name?cap_first}(Long id, Long ${relation.name}Id) {
        final ${entity.name} entity = ${entity.name}.<${entity.name}>findByIdOptional(id)
                .orElseThrow(() -> new NotFoundException("User id " + id + " not found"));
        final ${relation.targetEntity.name} role = ${relation.targetEntity.name}.<${relation.targetEntity.name}>findByIdOptional(${relation.name}Id)
                .orElseThrow(() -> new NotFoundException("${relation.targetEntity.name} id " + ${relation.name}Id + " not found"));
        
        entity.role = role;
    }

    public void unset${relation.name?cap_first}(Long id, Long ${relation.name}Id) {
        final ${entity.name} entity = ${entity.name}.<${entity.name}>findByIdOptional(id)
                .orElseThrow(() -> new NotFoundException("User id " + id + " not found"));
        final ${relation.targetEntity.name} roleToDelete = entity.role;
        if (roleToDelete == null) {
            throw new NotFoundException("${relation.targetEntity.name} id " + ${relation.name}Id + " not related to user " + id);
        }
        if (!Objects.equals(roleToDelete.id, ${relation.name}Id)) {
            throw new ClientErrorException(Response.Status.CONFLICT);
        }
        
        entity.role = null;
    }
    </#list>
    <#list entity.relations?filter(r -> r.type == 'MANY_TO_MANY' || r.type == 'ONE_TO_MANY') as relation>

    public List<${relation.targetEntity.name}Dto> get${relation.name?cap_first}(Long id) {
        return ${entity.name}.<${entity.name}>findByIdOptional(id)
                .map(appUser -> appUser.${relation.name})
                .orElseThrow(() -> new NotFoundException("User id " + id + " not found"))
                .stream()
                .map(${relation.name}Mapper::toDto)
                .toList();
    }

    public void add${relation.name?cap_first}(Long id, Long ${relation.name}Id) {
        final ${entity.name} entity = ${entity.name}.<${entity.name}>findByIdOptional(id)
                .orElseThrow(() -> new NotFoundException("${entity.name} id " + id + " not found"));
        final ${relation.targetEntity.name} ${relation.name} = ${relation.targetEntity.name}.<${relation.targetEntity.name}>findByIdOptional(${relation.name}Id)
                .orElseThrow(() -> new NotFoundException("${relation.targetEntity.name} id " + ${relation.name}Id + " not found"));
        final Set<${relation.targetEntity.name}> previous${relation.name?cap_first} = entity.${relation.name};
        previous${relation.name?cap_first}
                .stream()
                .filter(u -> u.id.equals(${relation.name}Id))
                .findAny()
                .ifPresentOrElse(us -> {
                    throw new ClientErrorException(Response.Status.CONFLICT);
                }, () -> entity.${relation.name}.add(${relation.name}));
    }

    public void remove${relation.name?cap_first}(Long id, Long ${relation.name}Id) {
        final ${entity.name} entity = ${entity.name}.<${entity.name}>findByIdOptional(id)
                .orElseThrow(() -> new NotFoundException("${entity.name} id " + id + " not found"));
        final Set<${relation.targetEntity.name}> previous${relation.name?cap_first} = entity.${relation.name};
        previous${relation.name?cap_first}
                .stream()
                .filter(u -> u.id.equals(${relation.name}Id))
                .findAny()
                .ifPresentOrElse(previous${relation.name?cap_first}::remove, () -> {
                    throw new NotFoundException();
                });
    }
    </#list>
}
