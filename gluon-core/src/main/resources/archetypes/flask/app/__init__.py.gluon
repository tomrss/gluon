"""Entrypoint of ${project.artifactId}.

This module contains all Flask related code:
- application initialization
- mapping of endpoints
- erorr handlers
"""

import logging
from flask import Flask, request, json
from flask.logging import create_logger
from werkzeug.exceptions import HTTPException


# create application

app = Flask(__name__)

# configure logging

gunicorn_logger = logging.getLogger("gunicorn.error")
logger = create_logger(app)

if gunicorn_logger.handlers:
    # in this case application was started by gunicorn: redirect logs to it
    logger.handlers = gunicorn_logger.handlers
    logger.setLevel(gunicorn_logger.level)


# define routes


@app.route("/healthz", methods=["GET"])
def health_check():
    """Health check endpoint."""
    return {"status": "UP"}


# register error handlers


@app.errorhandler(HTTPException)
def handle_http_exception(e):
    """Handle HTTP errors."""
    # start with the correct headers and status code from the error
    response = e.get_response()
    # replace the body with JSON
    response.data = json.dumps({
        "code": e.code,
        "name": e.name,
        "description": e.description,
    })
    response.content_type = "application/json"
    return response


@app.errorhandler(Exception)
def handle_generic_exception(e):
    """Handle generic error."""
    logger.exception("Unhandled exception: %s", str(e))
    err_response = {"type": str(type(e)), "description": str(e)}
    return (err_response, 500)
